; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = m5stack-core2

[env]
framework = arduino
board_build.filesystem = littlefs
extra_scripts = ./littlefsbuilder.py
monitor_speed = 115200
monitor_filters = time
upload_protocol = esptool

[env:featheresp32]
platform = espressif32
board = featheresp32
lib_deps = 
	me-no-dev/AsyncTCP @ ^1.1.1
	knolleary/PubSubClient@^2.8
	throwtheswitch/Unity@^2.5.2
build_flags = 
	${env.build_flags}
	-D=${PIOENV}
upload_port = /dev/cu.SLAB_USBtoUART*
monitor_port = /dev/cu.SLAB_USBtoUART*
test_port = /dev/cu.SLAB_USBtoUART*

[env:d1_mini]
platform = espressif8266
board = d1_mini
lib_deps = 
	me-no-dev/ESPAsyncTCP@^1.2.2
	ESP8266WiFi
	knolleary/PubSubClient@^2.8
	throwtheswitch/Unity@^2.5.2
test_port = /dev/cu.wch*
upload_port = /dev/cu.wch*
monitor_port = /dev/cu.wch*

[env:m5stack-core2]
; build_src_filter = +<test/*> 
platform = espressif32
board = m5stack-core2
lib_deps = 
	me-no-dev/AsyncTCP @ ^1.1.1
	knolleary/PubSubClient@^2.8
	m5stack/M5Core2@^0.1.5
	throwtheswitch/Unity@^2.5.2
	; ${m5stack-core2}/lib/libcatch2.a
build_flags = -D UNITY_OUTPUT_COLOR
test_port = /dev/cu.wch*
test_build_project_src = yes
; build_src_filter = -<src/main.cpp>
upload_port = /dev/cu.wch*
monitor_port = /dev/cu.wch*
monitor_filters = esp32_exception_decoder
